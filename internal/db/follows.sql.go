// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: follows.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const followToFeed = `-- name: FollowToFeed :one
INSERT INTO feed_follows(id, user_id, feed_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, user_id, feed_id
`

type FollowToFeedParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) FollowToFeed(ctx context.Context, arg FollowToFeedParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, followToFeed, arg.ID, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollows = `-- name: GetFeedFollows :many
SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows
WHERE user_id = $1
`

func (q *Queries) GetFeedFollows(ctx context.Context, userID uuid.UUID) ([]FeedFollow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollows, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FeedFollow
	for rows.Next() {
		var i FeedFollow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserID,
			&i.FeedID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unfollowFromFeed = `-- name: UnfollowFromFeed :exec
DELETE FROM feed_follows
WHERE user_id = $1 AND feed_id = $2
`

type UnfollowFromFeedParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) UnfollowFromFeed(ctx context.Context, arg UnfollowFromFeedParams) error {
	_, err := q.db.ExecContext(ctx, unfollowFromFeed, arg.UserID, arg.FeedID)
	return err
}
